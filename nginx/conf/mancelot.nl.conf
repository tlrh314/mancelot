uwsgi_cache_path /var/cache/nginx/django levels=1:2 keys_zone=microcache:10m 
    max_size=100m inactive=600s use_temp_path=off;


server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name mancelot.nl www.mancelot.nl;

    include /etc/nginx/apps/certbot.conf;
    include /etc/nginx/apps/cloudflare.conf;

    location / {
        include /etc/nginx/conf.d/security.conf;
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name mancelot.nl www.mancelot.nl;
    root /var/www/mancelot/root;

    ssl_certificate /etc/letsencrypt/live/mancelot.nl/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mancelot.nl/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    include /etc/nginx/apps/certbot.conf;
    include /etc/nginx/apps/cloudflare.conf;

    location /flower-internal/ {
        internal;

        resolver 127.0.0.11 valid=30s;
        resolver_timeout 3s;
        set $flower celery_flower:5555;

        rewrite ^/flower-internal/(.*)$ /$1 break;
        sub_filter '="/' '="/flower/';
        sub_filter_types application/javascript;  # by default, sub_filter won't touch JS
        sub_filter_last_modified on;
        sub_filter_once off;

        include /etc/nginx/mime.types;
        include /etc/nginx/conf.d/security.conf;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;  # allow websockets
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Forwarded-For $remote_addr;  # preserve client IP
        proxy_set_header Host $host;
        add_header X-debug "4: location /flower-internal --> $uri" always;
        proxy_pass http://$flower;
    }

    location /static {
        include /etc/nginx/apps/cache-static.conf;
        include /etc/nginx/conf.d/security.conf;

        alias /var/www/mancelot/static;
        add_header X-debug "3: location /static --> $uri" always;
        try_files $uri @backend;
    }

    location / {
        # Setup var defaults
        set $no_cache "1";
        # If non GET/HEAD, don't cache & mark user as uncacheable for 1 second via cookie
        if ($request_method !~ ^(GET|HEAD)$) {
            set $no_cache "1";
        }
        # Drop no cache cookie if need be
        # (for some reason, add_header fails if included in prior if-block)
        if ($no_cache = "1") {
            add_header Set-Cookie "_mcnc=1; Max-Age=3; Path=/";            
            add_header X-Microcachable "0";
        }
        # Bypass cache if no-cache cookie is set
        if ($http_cookie ~* "_mcnc") {
            set $no_cache "1";
        }
        # Bypass cache if flag is set
        uwsgi_no_cache $no_cache;
        uwsgi_cache_bypass $no_cache;

        uwsgi_cache microcache;
        uwsgi_cache_key $scheme$host$request_method$request_uri;
        add_header X-Cache-Status $upstream_cache_status;

        # Only cache valid HTTP 200 responses for 2 second
        uwsgi_cache_valid 200 2s;
        # Serve from cache if currently refreshing
        uwsgi_cache_use_stale updating;

        # Set files larger than 1M to stream rather than cache
        uwsgi_max_temp_file_size 1M;

        # Send appropriate headers through
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
        proxy_set_header X-Frame-Options SAMEORIGIN;

        # Point nginx to the backend
        include /etc/nginx/conf.d/security.conf;
        include /etc/nginx/uwsgi_params;
        resolver 127.0.0.11 valid=30s;
        set $upstream django:1337;
        add_header X-debug "2: location @backend --> $uri" always;
        uwsgi_pass $upstream;
    }
}
